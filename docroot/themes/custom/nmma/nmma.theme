<?php

/**
 * @file
 * Theme specific functionality.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\image\Entity\ImageStyle;
use Drupal\nmma_custom_pages\EntityHelp;

/**
 * Implements hook_page_attachments_alter().
 */
function nmma_page_attachments_alter(&$page) {
  foreach ($page['#attached']['html_head_link'] as $index => $head_link) {
    if ($head_link[0]['rel'] == 'shortcut icon') {
      $page['#attached']['html_head_link'][$index][0]['href'] = '/themes/custom/nmma/favicon.ico';
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function nmma_preprocess_html(&$variables) {
  $path = \Drupal::service('path.current')->getPath();
  $alias = trim(\Drupal::service('path.alias_manager')
    ->getAliasByPath($path), '/');
  // Body classes for sidebars.
  if (isset($variables['page']['sidebar_first']) && isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-both');
  }
  elseif (isset($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-first');
  }
  elseif (isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-second');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-none');
  }
  // Alias path class.
  $alias_class = preg_replace("/\//", '-', $alias);
  if (!empty($alias_class) && strpos($alias_class, 'node') !== 0) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('alias--' . $alias_class);
  }
  // If is homepage.
  $variables['attributes']['class'][] = \Drupal::service('path.matcher')
    ->isFrontPage() ? 'frontpage' : '';
  // Node type class.
  $variables['attributes']['class'][] = isset($variables['node_type']) ? 'nodetype--' . $variables['node_type'] : '';
  // Logged in class.
  $variables['attributes']['class'][] = $variables['logged_in'] ? 'logged-in' : 'logged-out';
}

/**
 * Implements hook_preprocess_page().
 */
function nmma_preprocess_page(&$variables) {

  $route_options = \Drupal::routeMatch()->getRouteObject()->getOptions();
  if (isset($route_options['parameters']['page_manager_page'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-panel');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-standard');
  }

  if (isset($variables['node']) && $variables['node']->getType() == 'component_page') {
    // Get The component Page's first brick.
    if (isset($variables['node']->get('field_component_bricks')->getValue()[0])) {
      $first_brick = $variables['node']->get('field_component_bricks')->getValue()[0]['target_id'];
      $entity = \Drupal::entityTypeManager()->getStorage('brick')->load($first_brick);
      // If the brick is a carousel, assume it is a hero.
      if ($entity->bundle() == 'carousel') {
        $variables['has_hero'] = TRUE;
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('brick');
        $pre_render = $view_builder->view($entity, 'default');
        // Hero renderable array.
        $variables['hero'] = render($pre_render);
        // Unset Hero so it isn't rendered twice - see preprocess node.
      }
    }
  }
  elseif (isset($variables['node']) && $variables['node']->getType() == 'video') {
    $variables['page']['content'][] = [
      '#theme' => 'video_in_modal',
      '#entity' => $variables['node'],
      '#attached' => ['library' => ['nmma_custom_pages/videos']],
    ];
  }

  // Footer Menu.
  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('footer');
  $tree = $menu_tree->load('footer', $parameters);
  // Transform the tree using the manipulators you want.
  $manipulators = [
    // Only show links that are accessible for the current user.
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    // Use the default sorting of menu links.
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menu_tree->transform($tree, $manipulators);
  $menu = $menu_tree->build($tree);
  $variables['footer_menu'] = ['#markup' => drupal_render($menu)];

  // Boat Types/Product Page.
  $current_path = \Drupal::service('path.current')->getPath();
  if (substr($current_path, 0, strlen('/taxonomy/term/')) == '/taxonomy/term/') {
    $tid = str_replace('/taxonomy/term/', '', $current_path);
    $term = Term::load($tid);

    if ($term->getVocabularyId() == 'boat_types') {
      $hero = $term->get('field_boat_type_hero_image')->getValue();
      if ($hero) {
        $media = Media::load($hero[0]['target_id']);
        $image_file = $media->get('image')->getValue();
        $file = File::load($image_file[0]['target_id']);

        $render = [
          '#theme' => 'internal_hero',
          '#image_background' => file_create_url($file->getFileUri()),
          '#title' => $variables['page']['#title'],
        ];

        $variables['hero'] = render($render);
      }
    }

    if ($term->getVocabularyId() == 'tags') {
      $variables['term_name'] = $term->getName();
    }
  }

  // Error pages.
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'system.404') {
    $variables['error'] = '404';
  }

  if ($route_name == 'system.403') {
    $variables['error'] = '403';
  }
}

/**
 * Implements hook_theme().
 */
function nmma_theme() {
  return [
    'internal_hero' => [
      'variables' => [
        'image_background' => NULL,
        'title' => NULL,
      ],
      'template' => 'internal-hero',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nmma_theme_suggestions_page_alter(&$suggestions, $variables) {

  $route_name = \Drupal::routeMatch()->getRouteName();
  switch ($route_name) {
    case 'entity.taxonomy_term.canonical':
      $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
      switch ($term->getVocabularyId()) {
        case 'boat_types':
          $suggestions[] = 'page__taxonomy_term__boat_type';
          break;

        case 'tags':
          $suggestions[] = 'page__taxonomy_term__tags';
          break;

      }
      break;

    case 'system.403':
    case 'system.404':
      $suggestions[] = 'page__error';
      break;

  }
}

/**
 * Implements template_preprocess_block().
 */
function nmma_preprocess_block(&$variables) {
  // Custom block type helper classes.
  if (isset($variables['elements']['content']['#block_content'])) {
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $bundle_class = str_replace('_', '-', $bundle);
    if (isset($variables['attributes']['class'])) {
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('block--bundle-' . $bundle_class);
      $variables['attributes']['data-bundle-class'] = $bundle_class;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function nmma_preprocess_node(&$variables) {
  // Helper variables for multiple nodes.
  if (!empty($variables['elements']['#entity_type'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('entity--type-' . $variables['elements']['#entity_type']);
  }
  $node = $variables['node'];
  $node_type = $node->getType();

  if ($node_type == 'carousel_slides') {
    $variables['slide_type'] = '';
    $variables['slide_media_url'] = '';
    $media_field = $node->get('field_carousel_media')->first();
    if (!$media_field) {
      return;
    }
    $referenced_entity = $media_field->getValue();
    $media = Media::load($referenced_entity['target_id']);
    $media_bundle = $media->bundle();
    $variables['slide_type'] = $media_bundle;
    if ($media_bundle == 'image') {
      $fid = $media->toArray()['image'][0]['target_id'];
      $file_uri = File::load($fid)->getFileUri();
      $url = ImageStyle::load('background_slide')->buildUrl($file_uri);
      $variables['slide_media_url'] = $url;
    }
  }

  if ($node_type == 'video') {
    $variables['video_image'] = '';
    $variables['video_id'] = '';
    $video_reference = $node->get('field_video_url')->first();
    if (!$video_reference) {
      return;
    }
    $referenced_entity = $video_reference->getValue();
    $media_video = Media::load($referenced_entity['target_id']);
    $image = NULL;
    if (NULL !== $media_video) {
      $image = EntityHelp::getEntityRefImageUrl($media_video, 'thumbnail');
    }
    $variables['video_image'] = $image;
    $video_id = $node->get('field_video_video_id')->value;
    $variables['video_id'] = $video_id;
  }

  if ($node_type == 'article') {
    $tsr_image = $node->get('field_article_tsr_image')->getValue();

    if ($tsr_image) {
      $image_id = $tsr_image[0]['target_id'];

      $media = Media::load($image_id);
      $file = $media->get('image')->getValue();
      $file_id = $file[0]['target_id'];

      $image_file = File::load($file_id);
      $path = $image_file->getFileUri();

      $style = \Drupal::entityTypeManager()
        ->getStorage('image_style')
        ->load('cropped_grid_item');
      $variables['path'] = $style->buildUrl($path);
    }
  }
}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function nmma_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];
  if ($term->getVocabularyId() == 'boat_types') {
    $hero = $term->get('field_boat_type_hero_image')->getValue();
    if (!$hero) {
      $variables['no_hero'] = TRUE;
    }
  }

  if ($term->getVocabularyId() == 'activities') {
    $tsr_image = $term->get('field_activity_type_tsr_image')->getValue();

    if (!empty($tsr_image)) {
      $image_id = $tsr_image[0]['target_id'];

      $media = Media::load($image_id);
      $file = $media->get('image')->getValue();
      $file_id = $file[0]['target_id'];

      $image_file = File::load($file_id);
      $path = $image_file->getFileUri();

      $style = \Drupal::entityTypeManager()
        ->getStorage('image_style')
        ->load('cropped_grid_item');
      $variables['path'] = $style->buildUrl($path);
    }
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function nmma_preprocess_eck_entity(&$variables) {
  $entity = $variables['entity']['#entity'];
  if ($entity->bundle() == '3_col_card') {
    $tsr_image = $entity->get('field_3_col_card_image')->getValue();
    $image_id = $tsr_image[0]['target_id'];

    $media = Media::load($image_id);
    $file = $media->get('image')->getValue();
    $file_id = $file[0]['target_id'];

    $image_file = File::load($file_id);
    $path = $image_file->getFileUri();

    $style = \Drupal::entityTypeManager()
      ->getStorage('image_style')
      ->load('cropped_grid_item');
    $variables['path'] = $style->buildUrl($path);
  }

  if ($entity->bundle() == 'landing_page_grid_card') {
    $tsr_image = $entity->get('field_lpg_media')->getValue();
    $image_id = $tsr_image[0]['target_id'];
    $link = $entity->get('field_lpg_url')->getValue();
    $url = Url::fromUri($link[0]['uri']);

    $media = Media::load($image_id);
    $file = $media->get('image')->getValue();
    $file_id = $file[0]['target_id'];

    $image_file = File::load($file_id);
    $path = $image_file->getFileUri();

    $style = \Drupal::entityTypeManager()
      ->getStorage('image_style')
      ->load('cropped_grid_item');
    $variables['path'] = $style->buildUrl($path);
    $variables['link'] = $url;
  }

  if ($entity->bundle() == 'media') {
    $entity = $variables['entity']['#brick'];
    $cover = $entity->get('field_image_cover')->getValue();

    if ($cover && $cover[0]['value'] == '1') {
      $image = $entity->get('field_brick_media')->getValue();
      if (!empty($image[0])) {
        $image_id = $image[0]['target_id'];

        $media = Media::load($image_id);
        $file = $media->get('image')->getValue();
        $file_id = $file[0]['target_id'];

        $image_file = File::load($file_id);
        $path = $image_file->getFileUri();

        $variables['image_bkgrnd'] = file_create_url($path);
      }
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function nmma_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] == 'field_component_bricks') {
    $nid = $variables['element']['#object']->id();

    $node = Node::load($nid);
    if (isset($node->get('field_component_bricks')->getValue()[0])) {
      $first_brick = $node->get('field_component_bricks')->getValue()[0]['target_id'];
      $entity = \Drupal::entityTypeManager()->getStorage('brick')->load($first_brick);
      if ($entity->bundle() == 'carousel') {
        $variables['has_hero'] = TRUE;
      }
    }
  }
  if ($variables['element']['#field_name'] == 'field_disruptor_cta') {
    $variables['items'][0]['content']['#options']['attributes']['class'][] = 'button';
  }
  if ($variables['element']['#field_name'] == 'field_brick_link') {
    $variables['items'][0]['content']['#options']['attributes']['class'][] = 'button--secondary';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Adds placeholder to header search field.
 */
function nmma_form_search_block_form_alter(&$form, FormStateInterface $formState) {
  $form['keys']['#placeholder'] = 'Search';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nmma_theme_suggestions_views_view_alter(&$suggestions, $variables) {
  if ($variables['view']->id() == 'taxonomy_term') {
    $suggestions[] = 'views_view__taxonomy_term';
  }

  if ($variables['view']->id() == 'tags_view') {
    $suggestions[] = 'views_view__tags_view';
  }

  if ($variables['view']->id() == 'boatfinder_views') {
    if ($variables['view']->current_display == 'boat_type_drawer') {
      $suggestions[] = 'views_view__boat_brand_drawer';
    }
  }

  if ($variables['view']->id() == 'dealer_search') {
    if ($variables['view']->current_display == 'block_2') {
      $suggestions[] = 'views_view__dealer_search_block';
    }
  }

  if ($variables['view']->id() == 'article_views') {
    $suggestions[] = 'views_view__article_view';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nmma_theme_suggestions_views_view_grid_alter(&$suggestions, $variables) {
  if ($variables['view']->id() == 'boatfinder_views' && $variables['view']->current_display == 'boat_type_brands') {
    $suggestions[] = 'views_view_grid__boat_type_brand';
  }
  if ($variables['view']->id() == 'business_views' && $variables['view']->current_display == 'block_1') {
    $suggestions[] = 'views_view_grid__business_grid';
  }
  if ($variables['view']->id() == 'activities_views' && $variables['view']->current_display == 'block_1') {
    $suggestions[] = 'views_view_grid__activity_grid';
  }
  if ($variables['view']->id() == 'accessories_search' && $variables['view']->current_display == 'block_1') {
    $suggestions[] = 'views_view_grid__accessories_grid';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nmma_theme_suggestions_views_view_unformatted_alter(&$suggestions, $variables) {
  if ($variables['view']->id() == 'tags_view') {
    $suggestions[] = 'views_view_unformatted__tags_view';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container and adds meta information.
 * Code borrowed from Seven theme.
 */
function nmma_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $form['#theme'] = ['node_edit_form'];
  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = [
    '#attributes' => ['class' => ['entity-meta__header']],
    '#type'       => 'container',
    '#group'      => 'advanced',
    '#weight'     => -100,
    'published'   => [
      '#type'       => 'html_tag',
      '#tag'        => 'h3',
      '#value'      => $node->isPublished() ? t('Published') : t('Not published'),
      '#access'     => !$node->isNew(),
      '#attributes' => [
        'class' => 'entity-meta__title',
      ],
    ],
    'changed' => [
      '#type' => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'entity-meta__last-saved',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ],
    'author' => [
      '#type' => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'author',
          'container-inline',
        ],
      ],
      '#markup' => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()->getUsername(),
    ],
  ];
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for user login form.
 *
 * Adds section page-content prefix and suffix.
 */
function nmma_form_user_login_form_alter(&$form, FormStateInterface $formState) {
  $form['#prefix'] = '<section class="page-content">';
  $form['#suffix'] = '</section>';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for user password form.
 *
 * Adds section page-content prefix and suffix.
 */
function nmma_form_user_pass_alter(&$form, FormStateInterface $formState) {
  $form['#prefix'] = '<section class="page-content">';
  $form['#suffix'] = '</section>';
}

/**
 * Implements hook_form_alter().
 *
 * Fixes some issues with views exposed filters not working correctly.
 */
function nmma_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $non_states = [
      'AS',
      'AA',
      'AE',
      'AP',
      'GU',
      'MH',
      'FM',
      'MP',
      'PW',
      'PR',
      'VI',
    ];
    if ($form['#id'] == 'views-exposed-form-dealer-search-block-1') {
      if (isset($form['field_bus_address_administrative_area'])) {
        $form['field_bus_address_administrative_area']['#options']['All'] = t('-- All States --');
        $form['field_bus_address_administrative_area']['#default_value'] = 'All';
        foreach ($form['field_bus_address_administrative_area']['#options'] as $k => $v) {
          if (in_array($k, $non_states)) {
            unset($form['field_bus_address_administrative_area']['#options'][$k]);
          }
        }
      }
    }
    if ($form['#id'] == 'views-exposed-form-youth-boating-block-2') {
      if (isset($form['field_ybp_address_administrative_area'])) {
        $form['field_ybp_address_administrative_area']['#options']['All'] = t('-- Any State --');
        $form['field_ybp_address_administrative_area']['#default_value'] = 'All';
        foreach ($form['field_ybp_address_administrative_area']['#options'] as $k => $v) {
          if (in_array($k, $non_states)) {
            unset($form['field_ybp_address_administrative_area']['#options'][$k]);
          }
        }
      }
    }
    if ($form['#id'] == 'views-exposed-form-videos-video-display-grid') {
      $form['#prefix'] = '<span class="text-strong">Search Videos</span>';
      unset($form['#info']['filter-title']['label']);
      $form['title']['#prefix'] = '<div class="submit-input-field">';
      $form['title']['#attributes']['placeholder'] = 'Search';
      $form['title']['#attributes']['size'] = '128';
      unset($form['actions']['submit']['#theme_wrappers']);
      $form['actions']['submit']['#value'] = '';
      $form['actions']['submit']['#prefix'] = '<button type="submit" class="button">';
      $form['actions']['submit']['#markup'] = '<i class="icon icon-db-arrow-right"></i></div>';
    }
    if ($form['#id'] == 'views-exposed-form-search-page') {
      $form['#prefix'] = '<div class="search-bar">';
      $form['#suffix'] = '</div>';
      $form['keywords']['#attributes']['placeholder'] = 'Search';
      $form['keywords']['#theme_wrappers'] = [];
      unset($form['actions']['submit']['#theme_wrappers']);
      $form['actions']['submit']['#value'] = '';
    }
    if ($form['#id'] == 'views-exposed-form-accessories-search-block-1') {
      unset($form['field_accessory_type_target_id']['#attributes']['class']);
      $form['field_accessory_type_target_id']['#attributes']['class'][] = 'chosen-disable';
      $form['title']['#attributes']['placeholder'] = 'Search For Manufacturers';
    }
  }
}

/**
 * Implements template_preprocess_views_view().
 */
function nmma_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  $id = $view->storage->id();
  if ($id == 'article_views') {
    $vars['more']['#options']['attributes']['class'] = [
      'text-xsmall',
    ];
  }
}

/**
 * Implements template_preprocess_views_view_fields().
 */
function nmma_preprocess_views_view_fields(&$vars) {
  switch ($vars['view']->storage->id()) {
    case 'boats_by_activity':
    case 'boatfinder_views':
      $vars['url'] = Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $vars['row']->tid])->toString();
      break;

  }
}

/**
 * Add twig suggestions for input elements.
 *
 * If a form api element has a data-twig-suggestion attribute, then allow twig
 * theme override, add to suggestions.
 *
 * @param array $suggestions
 *   Current list of twig suggestions.
 * @param array $variables
 *   Every variable of the current element.
 */
function nmma_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}

/**
 * Implements template_preprocess_breadcrumb().
 */
function nmma_preprocess_breadcrumb(&$variables) {

  /** @var \Drupal\Core\Link $link */
  foreach ($variables['breadcrumb'] as $key => $link) {
    if (empty($link['url'])) {
      switch ($link['text']) {
        case 'Activities':
          $variables['breadcrumb'][$key]['url'] = '/discover-boating';
          break;

        case 'Buying':
        case 'Boat':
          $variables['breadcrumb'][$key]['url'] = '/buying-a-boat';
          break;

        case 'Owning':
          $variables['breadcrumb'][$key]['url'] = '/ownership';
          break;

        case 'Resources':
        case 'Tags':
          $variables['breadcrumb'][$key]['url'] = '/articles-and-resources';
          break;

        default:
          break;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK() for form suggestion.
 */
function nmma_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}
