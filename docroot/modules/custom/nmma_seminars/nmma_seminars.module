<?php

/**
 * @file
 * Hook implementations for NMMA Seminars module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function nmma_seminars_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nmma seminars module.
    case 'help.page.nmma_seminars':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('NMMA Seminars module.') . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_node().
 */
function nmma_seminars_preprocess_node(&$variables) {
  $node = $variables['node'];
  // Preprocess variables based on node type.
  if ($node->getType() == 'speaker') {
    $references = nmma_seminars_get_backreferences($node->id(), 'seminar');
    if (!empty($references)) {
      $nodes = \Drupal::entityTypeManager()
        ->getStorage('node')->loadMultiple($references);
      foreach ($nodes as $nid => $node) {
        $link_url = Url::fromRoute('nmma_seminars.node_modal', [
          'nid' => $node->id(),
        ]);
        $link_url->setOptions([
          'attributes' => [
            'class' => ['use-ajax'],
            'data-dialog-type' => 'modal',
          ],
        ]);
        $variables['other_seminars'][$nid] = [
          'url' => Link::fromTextAndUrl($node->getTitle(),
             $link_url)->toString(),
        ];
      }
    }
  }
}

/**
 * Helper function to retrieve nodes that backreferencing current one.
 *
 * @param string $id
 *   Node id.
 * @param string $type
 *   Node type.
 * @return array backreferenced node objects.
 */
function nmma_seminars_get_backreferences($id, $type) {
  $parents = [];
  $query = \Drupal::entityTypeManager()
    ->getStorage('node')->getQuery()
    ->condition('type', $type)
    ->condition('field_speaker', $id, 'IN');
  $parents = $query->execute();
  return $parents;
}

function nmma_seminars_preprocess_views_view_field(&$variables) {
  if ($variables['view']->id() == 'seminars' && strpos($variables["output"],'[reserve_a_spot_start]') !== FALSE) {
    $registration_link = Settings::get('seminar.registration.link');
    $output = $variables["output"]->__toString();
    if (!$registration_link) {
      $start = strpos($output, '[reserve_a_spot_start]');
      $end = strpos($output, '[reserve_a_spot_end]') + 20;

      $output = substr_replace($output,'', $start, $end-$start);
      $variables['output'] = Drupal\views\Render\ViewsRenderPipelineMarkup::create($output);
      return;
    }

    $topics = [];
    foreach ($variables["row"]->_entity->field_topics->referencedEntities() as $term) {
      $topics[] = $term->id();
    }

    if ($registration_link && in_array(81,$topics)) {

      $link_token = strpos($output, '[seminar_registration_link]');
      $output = substr_replace($output, $registration_link,$link_token,27);

      $start = strpos($output, '[reserve_a_spot_start]');
      $output = substr_replace($output, '',$start,22);

      $end = strpos($output, '[reserve_a_spot_end]');
      $output = substr_replace($output, '',$end,20);

      $body_class = strpos($output, 'seminar-body');
      $output = substr_replace($output, 'seminar-body has-button ',$body_class,13);

      $variables['output'] = Drupal\views\Render\ViewsRenderPipelineMarkup::create($output);
      return;
    }

    if ($registration_link && !in_array(81,$topics)) {
      $start = strpos($output, '[reserve_a_spot_start]');
      $end = strpos($output, '[reserve_a_spot_end]') + 20;

      $output = substr_replace($output,'', $start, $end-$start);
      $variables['output'] = Drupal\views\Render\ViewsRenderPipelineMarkup::create($output);
      return;
    }
  }
}
