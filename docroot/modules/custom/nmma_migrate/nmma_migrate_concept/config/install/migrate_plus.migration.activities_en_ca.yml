langcode: en-CA
status: true
dependencies: {  }
id: activities_en_ca
class: null
field_plugin_method: null
cck_plugin_method: null
migration_tags: null
migration_group: discoverboating_com_concept
label: 'Importing activities from DiscoverBoating.com.'
source:
  plugin: csv
  path: ./modules/custom/nmma_migrate/nmma_migrate_concept/csv/activities_en_ca.csv
  # The number of rows at the beginning which are not data.
  header_row_count: 1
  # These are the field names from the source file representing the key
  # uniquely identifying each game - they will be stored in the migration
  # map table as columns sourceid1, sourceid2, and sourceid3.
  keys:
    - id
  # Here we identify the columns of interest in the source file. Each numeric
  # key is the 0-based index of the column. For each column, the key below
  # (e.g., "start_date") is the field name assigned to the data on import, to
  # be used in field mappings below. The value is a user-friendly string for
  # display by the migration UI.
  column_names:
    # So, here we're saying that the first field (index 0) on each line will
    # be stored in the start_date field in the Row object during migration, and
    # that name can be used to map the value below. "Date of game" will appear
    # in the UI to describe this field.
    0:
      id: Identifier
    1:
      title: Title
    2:
      content: Content
    3:
      boat_types: Boat Types
  constants:
    bool_0: 0
    bool_1: 1
    uid_root: 1
process:
  # Most fields can be mapped directly - we just specify the destination (D8)
  # field and the corresponding field name from above, and the values will be
  # copied in.
  sticky: constants/bool_0
  promote: constants/bool_0
  uid: constants/uid_root
  content_translation_uid: constants/uid_root
  name: title
  field_activity_type_body: content
  field_activity_type_boat_type:
      -
        plugin: explode
        source: boat_types
        delimiter: ';'
      -
        plugin: migration_lookup
        migration: boat_types_en_ca
        no_stub: true
      # This is silly, but the return of a lookup on a translated migration is the ID AND the language, this will
      # get the first value, the ID which is what the reference field expects.
      -
        plugin: callback
        callable: current

  langcode:
    plugin: default_value
    default_value: 'en-CA'
  # This will allow the translated node to find who it's default language parent is. Their IDs will match.
  tid:
    plugin: migration_lookup
    source: id
    migration: activities_en
    # This is very important, otherwise you'll get random characters created for the default language version if it
    # doesn't exist. Instead, there will be no default language version now BUT you will be unable to rollback
    # and entity with no default language.
    #no_stub: true
  # This needs to be set on all non-default language (en) imports so that this becomes a child of it.
  content_translation_source:
    plugin: default_value
    default_value: en
destination:
  plugin: 'entity:taxonomy_term'
  default_bundle: activities
  # This is required on non-default language translated entities so that they don't overwrite the entire entity and
  # instead just add a translation, however, it will add a new destid of the language that must be popped off if a
  # migration_lookup is called.
  translations: true
migration_dependencies:
  required:
    - boat_types_en_ca
