<?php

/**
 * @file
 * Contains nmma_forms.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\webform\Entity\WebformSubmission;

/**
 * Implements hook_preprocess_HOOK().
 */
function nmma_forms_preprocess_page(&$variables) {
  $variables['newsletter_form'] = \Drupal::formBuilder()->getForm('Drupal\nmma_forms\Form\Newsletter');
}

/**
 * Implements hook_library_info_alter().
 */
function nmma_forms_library_info_alter(&$libraries, $extension) {
  // The clientside_validation_jquery module doesn't set the right path to
  // additional methods.
  if (isset($libraries['jquery.validate']['js'])) {
    $libraries['jquery.validate']['js'] = [
      'js/lib/jquery.validate.js' => [],
      'js/lib/additional-methods.js' => [],
    ];
  }
}

/**
 * Implements hook_preprocess_input().
 */
function nmma_forms_preprocess_input(&$variables, $hook) {
  if (in_array($variables['element']['#type'], ['checkbox', 'radio'])) {
    $variables['#attached']['library'][] = 'nmma_forms/toggle';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nmma_forms_preprocess_cshs_select(&$variables) {
  $variables['#attached']['library'][] = 'nmma_forms/cshs';
}

/**
 * Implements hook_form_form_id_alter
 *
 * Alter fields on exhibitor edit to be readonly
 *
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 * @return void
 */
function nmma_forms_form_node_exhibitor_edit_form_alter(&$form, &$form_state, $form_id) {
  $current_user_roles = \Drupal::currentUser()->getRoles();

  if(!in_array('administrator', $current_user_roles)) {
    // array of fields to disable
    $disabled_fields = [
      'title',
      'field_address_line_1',
      'field_address_line_2',
      'field_city',
      'field_country',
      'field_exhibitor_id',
      'field_fax_number',
      'feeds_item',
      'field_feeds_tmp',
      'field_phone_number',
      'field_show_code',
      'field_state_or_province',
      'field_zip_or_postal_code',
    ];

    // Loop fields and set as disabled to make readonly
    foreach ($disabled_fields as $field) {
      $form[$field]['widget'][0]['value']['#attributes']['disabled'] = 'disabled';
    }

    // Link field doesn't follow the pattern the above use so needs to be specially disabled
    $form['field_website']['widget'][0]['uri']['#attributes']['disabled'] = 'disabled';

    // Disable paragraph add more button
    $form['field_exhibitor_location']['widget']['add_more']['add_more_button_exhibitor_location']['#attributes']['disabled'] = 'disabled';
  }
}

/**
 * Implements hook_field_widget_widget_id_alter
 *
 * For non-admins, disable exhibitor location fields
 * when on exhibitor node edit form
 *
 * @param [type] $element
 * @param [type] $form_state
 * @param [type] $context
 * @return void
 */
function nmma_forms_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  // Get current user's roles
  $current_user_roles = \Drupal::currentUser()->getRoles();

  // Check if paragraph type is exhibitor location AND user is not admin
  if($element['#paragraph_type'] === 'exhibitor_location' && !in_array('administrator', $current_user_roles)) {
    // If parent form is node exhibitor edit
    if ($form_state->getBuildInfo()['form_id'] === 'node_exhibitor_edit_form') {
      $element['subform']['field_exhbtr_lctn_booth']['widget'][0]['target_id']['#attributes']['disabled'] = 'disabled';
      $element['subform']['field_enabled']['widget']['value']['#attributes']['onclick'] = 'return false;';
    }
  }
}

/**
 * Implements hook_help().
 */
function nmma_forms_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.nmma_forms':

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Marketo Newsletter setting captures all the necessary fields to communicate to a specific list on the Marketo platform.') . '</p>';

      return $output;
  }
}

/**
 * Implements hook_entity_presave
 *
 * @param EntityInterface $entity
 * @return void
 */
function nmma_forms_entity_presave(EntityInterface $entity) {
  $node_types = ['article', 'special_offer'];

  // Check if node type correct, and changing from unpublished to published
  if (in_array($entity->bundle(), $node_types) && isset($entity->original)) {
    if (!$entity->original->isPublished() && $entity->isPublished()) {
      // Check if has correct fields
      if ($entity->hasField('field_webform_submitter_notified') && $entity->hasField('field_webform_submission_id')) {
        // Check if not notified yet and submission id is set
        if ((int) $entity->field_webform_submitter_notified->value !== 1
        && !empty($entity->field_webform_submission_id->value)) {
          $webform_sid = $entity->field_webform_submission_id->value;
          $webform_submission = WebformSubmission::load($webform_sid);
          $submission_data = $webform_submission->getData();

          if (isset($submission_data['submitter_email'])) {
            $mailManager = \Drupal::service('plugin.manager.mail');
            $to = $submission_data['submitter_email'];
            $params['subject'] = 'Your submission was published!';
            $params['body'] = "Congrats! Your submission was published.";

            // handle if article or special_offer for wording
            if ($entity->bundle() === 'article') {
              $params['subject'] = 'Your Exhibitor Article News has been Published';
              $params['body'] = 'Thank you for submitting your news article! We have reviewed your article and it is now published in our Media Center.';
            }
            elseif ($entity->bundle() === 'special_offer') {
              $params['subject'] = 'Your Exhibitor Special Offer has been Published';
              $params['body'] = 'Thank you for submitting your special offer! We have reviewed your offer and it is now published in the show siteâ€™s Special Offers section.';
            }

            // Send
            $result = $mailManager->mail('nmma_forms', 'node_published_notify', $to, 'en', $params, NULL, TRUE);

            if ($result['result'] != true) {
              $message = t('There was a problem sending your email notification to @email.', array('@email' => $to));
              drupal_set_message($message, 'error');
              \Drupal::logger('mail-log')->error($message);
              return;
            }

            $entity->set('field_webform_submitter_notified', 1);
            $message = t('An email notification has been sent to @email ', array('@email' => $to));
            drupal_set_message($message);
            \Drupal::logger('mail-log')->notice($message);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_email()
 *
 * @param [type] $key
 * @param [type] $message
 * @param [type] $params
 * @return void
 */
function nmma_forms_mail($key, &$message, $params) {
  switch ($key) {
    case 'node_published_notify':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t($params['subject']);
      $message['body'][] = $params['body'];
      break;
  }
}
